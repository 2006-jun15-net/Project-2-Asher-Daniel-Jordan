# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  solutionPath: Project2

jobs:
  - job: build_linux
    pool:
      vmImage: 'ubuntu-latest'
  
    steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud-Project2'
          organization: '2006-jun15-net'
          scannerMode: 'MSBuild'
          projectKey: '2006-jun15-net_Project-2-Asher-Daniel-Jordan'
          projectName: 'Hospital Management'
          extraProperties: |
            sonar.exclusions=**/lib/**
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml

      - script: dotnet build -c Release
        displayName: Build Project/Application and Release Config
        workingDirectory: $(solutionPath)

      - script: dotnet test -c Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        displayName: Run project tests
        workingDirectory: $(solutionPath)
      # - task: DotNetCoreCLI@2
      #   displayName: Run project tests
      #   inputs:
      #     command: 'test'
      #     projects: '$(solutionPath)'
      #     arguments: '-c Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'
      #     testRunTitle: 'ubuntu'
      
      - task: SonarCloudAnalyze@1
        displayName: Run SonarCloud Analysis
      
      - task: SonarCloudPublish@1
        displayName: Publish Analysis
        inputs:
          pollingTimeoutSec: '300'
      
      #$(Agent.TempDirectory)/*/coverage.cobertura.xml
      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(solutionPath)/*/TestResults/*/coverage.cobertura.xml'
          failIfCoverageEmpty: true
      
      - script: dotnet publish -c Release -o ../publish
        displayName: Publish our application
        workingDirectory: $(solutionPath)
      
      - task: AzureRmWebAppDeployment@4
        displayName: Azure App Service Deployment
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'Azure subscription 1(6bfb27c8-f9ac-40e8-9b4f-55922e406dbf)'
          appType: 'webApp'
          WebAppName: 'Project2-Hospital'
          packageForLinux: '$(System.DefaultWorkingDirectory)/publish'